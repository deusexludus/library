import os
import os
import pandas
import re
import tkinter
from tkinter import messagebox
import threading

class Results_Search(object):
    def __init__(self):
        self.overall_res = {}
        self.res_by_file = {}
        self.tID_text = "<TR><TD><FONT SIZE=1><B>TestId</B></FONT></TD><TD COLSPAN=2><FONT SIZE=1><B>"
        self.resfile_header = r'<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="2" BGCOLOR="#F5F5F5">'
        
    def walk_through_dir(self, input_path):
        for subdir, dirs, files in os.walk(input_path):
            #print('Found subdirectory: %s' % subdir)
            #print('Found folders here: %s' % dirs)
            for file in files:
                filepath = subdir + os.sep + file
                g.update_s(g.s, 'checking' + filepath)
                if filepath.endswith(".htm"):
                    self.build_result_from_file(filepath, file)

    def build_result_from_file(self, filepath, file):
        skipping = 0
        result = "None"
        file = file[:len(file)-4]
        if len(file) > 31:
            file = '_trimmed_' + file[17:39]
        tmp = 0
        while True:
            tmp += 1
            if file in self.res_by_file.keys():
                file = file[:28] + '_' + str(tmp)
            else:
                break
        self.res_by_file[file] = []
        for i, line in enumerate(open(filepath)): 
            if i == 4 and line[:-1] != self.resfile_header: #skip htm files that are not res files
                break
            for match in re.finditer(self.tID_text, line):
                if match:
                    tID_end = line.find('&',76, len(line))
                    tID = int(line[76:tID_end])
                    skipping = 1
                    #print(f'found TID {tID} on line {i}')
            if skipping == 7:
                beg = line.find('COLOR=#', 20, len(line))
                code = line[beg + 7:beg + 10]
                skipping = 0
                if code == "00C":
                    result = "PASS"
                elif code == "FF0":
                    result = "FAIL"
                elif code == "000":
                    result = "SKIPPED"
                else:
                    print(f'Result: {code} didn\'t match Pass/Fail/Skipped {file}, {line}')
                self.res_by_file[file].append((tID, result))
                if result == "SKIPPED":
                    continue
                if tID in self.overall_res.keys() and self.overall_res[tID] != result:
                    self.overall_res[tID] = 'Results Mixed'
                else:
                    self.overall_res[tID] = result
            elif skipping:
                skipping += 1

    def output_to_excel(self, g, input_path):
        subdir_start = input_path[::-1].find('\\')
        subdir = input_path[(len(input_path) - subdir_start):]
        new_path = 'C:\\Temp\\' + subdir + '.xlsx'
        try:
            writer = pandas.ExcelWriter(new_path, engine = 'openpyxl')
            out_k, out_v = [], []
            for k in sorted(self.overall_res):
                out_k.append(k)
                out_v.append(self.overall_res[k])
            df_res = pandas.DataFrame({'TID': out_k, 'Result': out_v})
            df_res.to_excel(writer, sheet_name = 'Overall Results by TID')
            for file in self.res_by_file.keys():
                tID, result = [], []
                for i in range(len(self.res_by_file[file])):
                    tID.append(self.res_by_file[file][i][0])
                    result.append(self.res_by_file[file][i][1])
                df_file = pandas.DataFrame({'TID': tID, 'Result': result})
                df_file.to_excel(writer, sheet_name = file)
            writer.save()
            writer.close()
            g.update_s(g.s, f'Done! Created {new_path}')
        except PermissionError as e:
            g.update_s(g.s, f'Close the excel file before regenerating! {e}')
        except Exception as e:
            g.update_s(g.s, e)
        

class GUI(object):
    def __init__(self):
        self.about_info = ("Searches a given folder and all subdirectories for .htm results "
                    "files and outputs to C:\\Temp\\<root folder name>.xlsx.\n\nBruce Dunn 2019")
        self.s = None

    def message(self):
        mb1 = messagebox.showinfo("About", self.about_info)

    def run(self):
        input_path = r"{}".format(self.e1.get())
        self.update_s(self.s, 'Analyzing ' + input_path)
        r.walk_through_dir(input_path)
        self.update_s(self.s, 'building output file')
        r.output_to_excel(g, input_path)

    def update_s(self, stringvar, text):
        stringvar.set(text)

    def draw(self):
        m = tkinter.Tk()
        m.title('Parse Results Files')
        self.s = tkinter.StringVar()
        l1 = tkinter.Label(m, text = 'Root Folder')
        l2 = tkinter.Label(m, text = 'Status:')       
        l3 = tkinter.Label(m, textvariable = self.s)
        self.update_s(self.s, "Paste root folder into Entry box and click Parse Folder")
        self.e1 = tkinter.Entry(m, width = 100, borderwidth = 5)
        b1 = tkinter.Button(m, text = 'Parse Folder', width = 25, command = self.run)
        b2 = tkinter.Button(m, text = 'How to use', width = 25, command = self.message)

        l1.grid(row = 0)
        l2.grid(row = 1)
        l3.grid(row = 1, column = 1)
        self.e1.grid(row = 0, column = 1)
        b1.grid(row = 0, column = 2, padx = 25, pady = 10)
        b2.grid(row = 2, padx = 50, pady = 20)

        m.mainloop()

r = Results_Search()
g = GUI()
g.draw()
#input_path = r'I:\Bruce\common emb 19\archive of TM\TM dry runs\Post RCN'
#output_path = 'C:\\Temp\\'
#r.walk_through_dir()
#r.output_to_excel()
